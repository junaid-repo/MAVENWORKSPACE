package java8;

import java.util.List;
import java.util.function.BinaryOperator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collectors;

public class F04BehaviourParamaterization {

	public static void main(String[] args) {
		List<Integer> numbers = List.of(4, 2, 8, 5, 10);

		Function<Integer, Integer> mapper = i -> i * i;
		Function<Integer, Integer> mapper2 = i -> i * i * i;

		List<Integer> squaredNumbers = extracted(numbers, mapper);
		List<Integer> squaredNumbers2 = extracted(numbers, mapper);

		//System.out.println(squaredNumbers);
		System.out.println(squaredNumbers2);


	}

	private static List<Integer> extracted(List<Integer> numbers, Function<Integer, Integer> mapper) {
		List<Integer> squaredNumbers = numbers.stream().map(mapper).collect(Collectors.toList());
		return squaredNumbers;
	}

}