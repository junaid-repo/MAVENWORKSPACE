package java8;

import java.util.List;
import java.util.Random;
import java.util.function.BinaryOperator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.stream.Collectors;

public class F04BehaviourParamaterization {

	public static void main(String[] args) {
		List<Integer> numbers = List.of(4, 2, 8, 5, 10);

		List<Integer> squaredNumbers = mapAndCreate(numbers, i -> i * i);
		// System.out.println(squaredNumbers);

		Consumer<Integer> consum = x -> System.out.println(x);

		Supplier<Integer> supp = () -> {
			int sum = 0;
			for (int i = 0; i < 20; i++) {
				sum = sum + 0;
			}
			return sum;
		};

		System.out.println(supp.get());
	}

	private static List<Integer> mapAndCreate(List<Integer> numbers, Function<Integer, Integer> mapper) {
		return numbers.stream().map(mapper).collect(Collectors.toList());
	}

}