package java8;

import java.util.List;
import java.util.function.BinaryOperator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;

public class F03BehaviourParamaterization {

	public static void main(String[] args) {
		List<Integer> numbers = List.of(45, 2, 8, 5, 10);

		Predicate<Integer> isEvenPredicate = i -> i % 2 == 0;
		Predicate<Integer> isEvenPredicate2 = new Predicate<Integer>() {

			@Override
			public boolean test(Integer t) {
				// TODO Auto-generated method stub
				return t % 2 == 0;
			}

		};
		Function<Integer, Integer> squareFunction = i -> i * i;
		Function<Integer, Integer> squareFunction2 = new Function<Integer, Integer>() {

			@Override
			public Integer apply(Integer t) {
				// TODO Auto-generated method stub
				return t * t * t;
			}

		};
		Consumer<Integer> sysoutConsumer = System.out::println;
		Consumer<Integer> sysoutConsumer2 = new Consumer<Integer>() {

			@Override
			public void accept(Integer t) {
				System.out.println("The Cube root of the number is " + t);

			}

		};

		numbers.stream().filter(isEvenPredicate2).map(squareFunction2).forEach(sysoutConsumer2);

////////////////////Exercises///////////////////////

		BinaryOperator<Integer> accumulator = new BinaryOperator<Integer>() {

			@Override
			public Integer apply(Integer t, Integer u) {
				// TODO Auto-generated method stub
				return t+u+19;
			}
			
		};
		int sum = numbers.stream().reduce(0, accumulator);
		System.out.println(sum);

	}

}
